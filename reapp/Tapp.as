package{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;		//switch these to the caurina tweens.	import fl.transitions.Tween;	import fl.transitions.easing.Strong;	import fl.transitions.TweenEvent;		public class Tapp extends MovieClip{		var ripples:Array = [];				//var pulselights:Array = [];		var glows:Array = [];				var tempo:int = 10;		var currentCol:int = 0;		var runningCol:int = 0;		var ledWidth:int = 38;		var ledHeight:int = 38;		var mouseLeds:Boolean = false;		var ledMask:Sprite = new Sprite();		var ledsOn:Array = [];		var ledOverlay:Sprite = new Sprite();				public function Tapp():void{			//stop and remove leather menu.			selectfly.stop();			removeChild(selectfly);						//set up masking sprite for lights on sprite.			ledOn.addChild(ledMask);			ledOn.mouseChildren = false;			ledOn.mask = ledMask;					//led overlay for mouse interaction.			ledOverlay.graphics.beginFill(0x000000, 0);			ledOverlay.graphics.drawRect(0, 0, 303, 292);			ledOverlay.x = 10;			ledOverlay.y = 10;			ledOverlay.buttonMode = true;			ledOverlay.addEventListener(MouseEvent.MOUSE_MOVE, redrawLights);						//set up a 'glow' and 'pulse' for each column, alpha at 0.			for (var i:int = 0; i<8; i++){				glows[i] = new glow();				glows[i].alpha = 0;				//pulselights[i] = new pulselight();				//pulselights[i].alpha = 0;				addChild(glows[i]);				//addChild(pulselights[i]);			}									//create a ripple for each column			for (var i:int = 0; i<8; i++){				ripples[i] = new Ripple();				addChild(ripples[i]);			}						//initial led buttons on:			ledMask.graphics.beginFill(0xffffff, 1);			for(var i:int = 0; i<8; i++){				lightUp((7-i), i);				ledsOn[i] = 7-i;			}			stage.addEventListener(Event.ENTER_FRAME, scrubLight);						//add listeners for buttons.			select.addEventListener(MouseEvent.MOUSE_DOWN, sflyout);			select.buttonMode = true;			selectfly.buttonMode = true;			out_btn.addEventListener(MouseEvent.MOUSE_DOWN, zoomOut);			out_btn.buttonMode = true;						//add led overly last (on top).			addChild(ledOverlay);		}				function redrawLights(event:MouseEvent):void{			var mCol:int = event.localX / ledWidth;			var mRow:int = event.localY / ledHeight;			//trace(mCol, mRow); 			lightUp(mRow, mCol);		}		function lightUp(ledRow, ledCol):void{			if(ledsOn[ledCol] == ledRow){				//correct light already on.  Pulse it?			}			else{				//redraw mask.				ledsOn[ledCol] = ledRow;				ledMask.graphics.clear();				for(var i:int = 0; i<ledsOn.length; i++){										var offsetX:int = (4-i)*(-2);					var offsetY:Number = (4-ledsOn[i])*(-.5);									var lightX:Number = (i * ledWidth) + (ledWidth/2) + offsetX;					var lightY:Number = (ledsOn[i] * ledHeight) + (ledHeight/2) + offsetY;												ledMask.graphics.beginFill(0x000000, 1);					ledMask.graphics.drawCircle(lightX, lightY, 24);					ledMask.graphics.endFill();										ripples[i].x = lightX + 10;					ripples[i].y = lightY + 5;										//ripples[i].RipPulse();					//addChild(ripple);					glows[i].y = lightY;					glows[i].x = lightX + 10;					//pulselights[i].y = lightY;					//pulselights[i].x = lightX + 10;				}			}		}				function pulse(column:int):void{			var glowPulse:Tween = new Tween(glows[column], "alpha", Strong.easeOut, glows[column].alpha, 1, .2, true);			//var pulsePulse:Tween = new Tween(pulselights[column], "alpha", Strong.easeOut, pulselights[column].alpha, 1, .2, true);			glowPulse.addEventListener(TweenEvent.MOTION_FINISH, function(){pulseBack(glowPulse, column)});		}		function pulseBack(glowPulse:Tween, column:int):void{			glowPulse = new Tween(glows[column], "alpha", Strong.easeIn, glows[column].alpha, 0, .4, true)			glowPulse.removeEventListener(TweenEvent.MOTION_FINISH, pulseBack);			//pulsePulse = new Tween(pulselights[column], "alpha", Strong.easeOut, pulselights[column].alpha, 0, .9, true);		}				function scrubLight(event:Event):void{			if(mouseLeds){				var mCol:int = (mouseX-10) / ledWidth;				var mRow:int = (mouseY-10) / ledHeight;				trace(mCol, mRow);			}			scrub.x += tempo;			if(scrub.x + scrub.width > (8 * ledWidth) + 10){				scrub.x = 10 - scrub.width;			}			currentCol = (scrub.x - 10) / ledWidth;						if(currentCol != runningCol){				pulse(currentCol);				ripples[currentCol].RipPulse();			}			runningCol = currentCol;		}				//roll leather menu up / down		function sflyout(event:MouseEvent):void{			stage.addEventListener(Event.ENTER_FRAME, rollDown);			selectfly.addEventListener(MouseEvent.MOUSE_DOWN, sflyin);		}		function sflyin(event:MouseEvent):void{			stage.addEventListener(Event.ENTER_FRAME, rollUp);			selectfly.removeEventListener(MouseEvent.MOUSE_DOWN, rollUp);					}		function rollUp(event:Event):void{			if(selectfly.currentFrame > 1){				selectfly.gotoAndStop(selectfly.currentFrame - 1);			}			else{				removeChild(selectfly);				selectfly.visible = false;				stage.removeEventListener(Event.ENTER_FRAME, rollUp);			}			}		function rollDown(event:Event):void{			addChild(selectfly);			selectfly.visible = true;			if(selectfly.currentFrame < selectfly.totalFrames){				selectfly.gotoAndStop(selectfly.currentFrame + 1);			}			else{				stage.removeEventListener(Event.ENTER_FRAME, rollDown);			}		}				//zoom out		function zoomOut(event:MouseEvent):void{					}	}}